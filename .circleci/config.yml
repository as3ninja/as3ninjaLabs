version: 2.1
jobs:
  cicd-tooling:
    docker:
      - image: circleci/python:3.8
    steps:
      - run:
          name: Clone latest AS3 Ninja
          command: |
            git clone --depth 1 https://github.com/simonkowallik/as3ninja $HOME/as3ninja

      - restore_cache:  # performance
          key: v4-cicd-tooling-{{ checksum "~/as3ninja/as3ninja/__init__.py" }}

      - run:
          name: Install AS3 Ninja
          command: |
            pip3 install as3ninja

      - run:
          name: Install yamllint
          command: |
            pip3 install yamllint

      - run:
          name: "Install pytest and test dependencies"
          command: |
            pip3 install \
              boltons \
              pytest \
              pyyaml \
              ;

#      - run:
#          name: Install prettier
#          command: |
#            sudo apt install npm
#            npm install prettier

      - run:
          name: Install detect-secrets
          command: |
            pip3 install detect-secrets

#      - run:
#          name: Install conftest
#          command: |
#            mkdir -p ~/conftest
#            cd ~/conftest
#            test -f ./conftest || curl -Lo - https://github.com/instrumenta/conftest/releases/download/v0.17.0/conftest_0.17.0_Linux_x86_64.tar.gz | tar xzf -
#            chmod +x conftest

      - run:  # create a directory to store artifacts
          name: create Artifact Store
          command: |
            mkdir -p ~/artifacts

      - run:
          name: AS3 Ninja Version check
          command: |
            as3ninja --version

      - save_cache:
          paths:
            - ~/.local
            - ~/as3ninja
#            - ~/conftest
            - ~/project
            - ~/artifacts
          key: v4-cicd-tooling-{{ checksum "~/as3ninja/as3ninja/__init__.py" }}

  Lab10X:
    docker:
      - image: circleci/python:3.8
      - image: docker.io/simonkowallik/as3ninja
      - image: docker.io/vault
        environment:
          SKIP_SETCAP: skip
          VAULT_DEV_ROOT_TOKEN_ID: YmFzZTY0LCBob29yYXkgOi0p

    environment:
      # Vault token and address
      VAULT_TOKEN: YmFzZTY0LCBob29yYXkgOi0p
      VAULT_ADDR: http://127.0.0.1:8200

    steps:
      - checkout  # clone as3ninjaLabs git repo

      - run:  # check git details for changes to this specific Lab, otherwise skip CI tests
          name: Check for changes to Lab10X, otherwise skip CI
          command: |
            cicd/skip_ci_when_unchanged.sh Lab10X

      - restore_cache:  # activate cached cicd tooling
          key: v4-cicd-tooling

      - run:
          name: Setup Vault DEV/DEMO instance
          command: |
            # activate python virtual environment, then setup vault
            cicd/labsetup/vault_create_secrets.sh
            cicd/labsetup/vault_setup.py | jq .

      - run:
          name: "CI Security: Detect violations to secrets baseline"
          command: |
            # CI pipeline will fail when violations to the secrets baseline are found
            cicd/security/secrets/detect.sh

      - run:
          name: "CI Validation: Validate all YAML files for proper formatting"
          command: |
            # CI pipeline will fail on errors but continue on warnings
            yamllint Lab10X/**/*.yaml

      - run:
          name: "CI Test: Run Lab 101 tests"
          command: |
            tests/Lab101/test.sh

      - run:
          name: "CI Test: Security, Configuration Practice tests for Lab 104"
          command: |
            # Lab104: Security tests
            pytest -vs tests/Lab104/test_configuration_security.py

            # Lab104: Check required practices / configurations
            pytest -vs tests/Lab104/test_configuration_practices.py

      - run:
          name: Build AS3 Declaration artifacts
          command: |
            # Lab 101: Build AS3 Declaration artifact by converting YAML to JSON
            cicd/yaml2json -f Lab10X/101/AS3Declaration.yaml | jq . > ~/artifacts/101_AS3Declaration.json

            # Lab 102: Build AS3 Declaration artifact by converting YAML to JSON
            cicd/yaml2json -f Lab10X/102/AS3Declaration.yaml | jq . > ~/artifacts/102_AS3Declaration.json

            # Lab 103: Use Makefile to build artifact
            make -C Lab10X/103/ artifact

            # Lab 104: Use Makefile to build artifact
            make -C Lab10X/104/ artifact

      - run:
          name: "CI Test: Validate AS3 Declarations comply to AS3 Schema"
          command: |
            # run AS3 Schema validation test against AS3 Declaration

            for ARTIFACT in $(find ~/artifacts -type f -name *AS3Declaration.json)
            do
              echo -e "\n\n* validating: $ARTIFACT"
              cicd/AS3Schema_validation.sh $ARTIFACT
            done

      - store_artifacts:
          name: Store AS3 Declaration Artifact for later deployment
          path: ~/artifacts
          destination: artifacts

      - save_cache:
          paths:
            - ~/artifacts  # save artifacts for CD
            - ~/project  # save current project, avoids another git checkout
          key: v1-Lab10X-{{ .Revision }}

  ContinuousDelivery:
    docker:
      - image: circleci/python:3.8

    steps:
      # restore previously cached data from cicd-tooling and each CI Lab pipeline
      - restore_cache:
          key: v4-cicd-tooling
      - restore_cache:
          key: v1-Lab10X-{{ .Revision }}

      - run:  # CD/Continuous Delivery: deploy every artifact
          name: Deploy AS3 Declaration to Hastebin
          command: |
            # Hastebin can't do much with a Declaration but it serves the purpose to demo CD

            for artifact in $(find ~/artifacts -type f -name *AS3Declaration.json)
            do
              cicd/deploy_hastebin.sh $artifact
            done

workflows:
  version: 2
  "AS3 Ninja CI+CD Labs":
    jobs:
      # 1. Setup CI environment
      - cicd-tooling
      # 2. Run CI for all Labs
      - Lab10X:
          requires:
            - cicd-tooling
      # 3. Deploy (requires CI for all Labs to succeed)
      - ContinuousDelivery:
          requires:
            - Lab10X
